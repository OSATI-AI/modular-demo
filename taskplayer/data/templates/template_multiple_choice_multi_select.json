{
  "template_id": "template_multiple_choice_multi_select",
  "title": "Multiple Choice Multi Select Template",
  "example_task": "task_pizza_sharing",
  "description": "A template for multiple choice questions with checkboxes allowing multiple selections. It contains a question element, an optional image placeholder, and multiple choice elements. The image placeholder can be left blank if not needed by a task.",
  "events": {
    "send": ["choices_selected"],
    "receive": ["refresh"]
  },
  "html": "<div class=\"question-container\">\n  <p id=\"question\"></p>\n  <div id=\"image_placeholder\"></div>\n  <div id=\"choices-container\"></div>\n</div>",
  "styles": ".choice {\n  padding: 10px;\n  border: 1px solid #ccc;\n  cursor: pointer;\n  margin: 5px 0;\n  display: flex;\n  align-items: center;\n}\n\n.choice.selected {\n  background-color: #d3d3d3;\n  border-color: #000;\n}\n\n.choice:hover {\n  background-color: #f0f0f0;\n}",
  "scripts": "let selectedChoices = [];\n\n// Function to create the layout for the template\n// Note: imagePlaceholder is optional and can be left unchanged if no image is needed\nfunction createLayout(details) {\n  const questionElement = document.getElementById('question');\n  \n  // Get the image placeholder element by its ID (optional)\n  const imagePlaceholder = document.getElementById('image_placeholder');\n  \n  const choicesContainer = document.getElementById('choices-container');\n  choicesContainer.innerHTML = ''; // Clear any existing content\n  \n  const choiceElements = [];\n  for (let i = 0; i < details.choices; i++) {\n    const choiceElement = document.createElement('div');\n    choiceElement.classList.add('choice');\n    \n    // Create a checkbox for each choice\n    const checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    \n    // Add an event listener to handle checkbox clicks\n    checkbox.addEventListener('click', () => selectChoice(checkbox, i));\n    choiceElement.appendChild(checkbox);\n    \n    // Create a label to display the choice text\n    const label = document.createElement('label');\n    label.innerText = details.choicesData[i];\n    choiceElement.appendChild(label);\n    \n    choicesContainer.appendChild(choiceElement);\n    choiceElements.push(choiceElement);\n  }\n  \n  return { questionElement, imagePlaceholder, choiceElements };\n}\n\n// Function to handle the selection of a choice\nfunction selectChoice(checkbox, id) {\n  // Add or remove the choice ID from the selectedChoices array based on the checkbox state\n  if (checkbox.checked) {\n    selectedChoices.push(id);\n  } else {\n    selectedChoices = selectedChoices.filter(choiceId => choiceId !== id);\n  }\n  \n  // Send an event with the updated list of selected choices\n  playerApi.sendEvent('choices_selected', selectedChoices.map(id => ({ id })));\n}\n\n// Override the callTemplateScript method of playerApi to handle method calls\n// This allows tasks to communicate with the template by calling this method\nplayerApi.callTemplateScript = (method, details) => {\n  if (method === 'createLayout') {\n    return createLayout(details);\n  }\n};\n\n// Listener for the 'refresh' event to reset the selected choices and checkboxes\nplayerApi.receiveEvent('refresh', function() {\n  // Clear the selectedChoices array\n  selectedChoices = [];\n  \n  // Uncheck all checkboxes\n  document.querySelectorAll('.choice input').forEach(checkbox => checkbox.checked = false);\n});\n\n/*\nUsage Instructions:\n- This template is designed for tasks that require multiple choice questions with checkboxes allowing multiple selections.\n- The task should call the 'createLayout' method to initialize the layout.\n- The details object passed to 'createLayout' should include:\n  - `choices`: The number of choices to display.\n  - `choicesData`: An array of strings representing the text for each choice.\n\nExample Task Setup:\n- The task calls `playerApi.callTemplateScript('createLayout', details);` where `details` includes:\n  - `choices`: The number of choices (e.g., 5).\n  - `choicesData`: An array of choice texts (e.g., ['Choice 1', 'Choice 2', 'Choice 3', 'Choice 4', 'Choice 5']).\n\nCommunication Between Template and Task:\n- The template can send events such as 'choices_selected' with the updated list of selected choices.\n- The template can receive events such as 'refresh' to reset the selected choices and checkboxes.\n*/"
}
