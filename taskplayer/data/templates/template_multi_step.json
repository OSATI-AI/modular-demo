{
    "template_id": "template_multi_step",
    "title": "Multi-Step Problem Template",
    "description": "A template for solving multi-step problems sequentially.",
    "example_task": "task_fraction_distance",
    "events": {
      "send": ["step_input"],
      "receive": ["next_step"]
    },
    "html": "<div class='template_container'>\n  <h2 id='main_question'></h2>\n  <div id='steps_container'></div>\n</div>",
    "styles": ".template_container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  box-sizing: border-box;\n}\n#main_question {\n  margin-bottom: 20px;\n  font-size: 20px;\n}\n.step {\n  margin-bottom: 15px;\n}\n.step-question {\n  font-size: 18px;\n}\n.step-input {\n  margin-top: 5px;\n  font-size: 16px;\n  padding: 5px;\n  width: 100px;\n  outline: none;\n  border: 2px solid grey;\n}\n.step-input.error {\n  border-color: red;\n}\n.step-input.correct {\n  border-color: green;\n}",
    "scripts": "let currentStep = 0;\nlet steps = [];\n\nfunction createLayout(details) {\n  const { mainQuestion, steps: receivedSteps } = details;\n  const mainQuestionElement = document.getElementById('main_question');\n  const stepsContainer = document.getElementById('steps_container');\n  mainQuestionElement.innerText = mainQuestion;\n  stepsContainer.innerHTML = '';\n  currentStep = 0;\n  steps = receivedSteps; // Save steps globally\n  displayStep(steps[currentStep], currentStep);\n  return { mainQuestionElement, stepsContainer };\n}\n\nfunction displayStep(question, stepIndex) {\n  const stepsContainer = document.getElementById('steps_container');\n  const stepDiv = document.createElement('div');\n  stepDiv.classList.add('step');\n  stepDiv.id = `step_${stepIndex}`;\n  stepDiv.innerHTML = `\n    <p class='step-question'>${question}</p>\n    <input type='text' class='step-input' data-step='${stepIndex}'>\n  `;\n  stepsContainer.appendChild(stepDiv);\n\n  // Add input event listener\n  stepDiv.querySelector('.step-input').addEventListener('input', handleInput);\n}\n\nfunction handleInput(event) {\n  const input = event.target.value;\n  const stepIndex = parseInt(event.target.getAttribute('data-step'), 10);\n  if (stepIndex < steps.length - 1) { // Do not change the outline for the last step\n    event.target.classList.add('error'); // Add red outline on typing\n  }\n  playerApi.sendEvent('step_input', { stepIndex, input });\n}\n\nplayerApi.callTemplateScript = (method, details) => {\n  if (method === 'createLayout') {\n    return createLayout(details);\n  }\n};\n\nplayerApi.receiveEvent('next_step', function() {\n  console.log('Received next_step event');\n  const currentInput = document.querySelector(`input[data-step='${currentStep}']`);\n  if (currentStep < steps.length - 1) { // Do not change the outline for the last step\n    currentInput.classList.remove('error');\n    currentInput.classList.add('correct'); // Add green outline for correct input\n  }\n  currentStep += 1;\n  console.log('Current step:', currentStep);\n  displayStep(steps[currentStep], currentStep);\n});\n\n/*\nUsage Instructions:\n- This template is designed for multi-step problems.\n- The task should call the 'createLayout' method to initialize the layout.\n- The details object passed to 'createLayout' should include:\n  - 'mainQuestion': The main question to be displayed at the top.\n  - 'steps': An array of strings, each representing a step question.\n- The template handles displaying each step sequentially as the previous step is correctly answered.\n- When a step's input is provided, the template sends a 'step_input' event with the step index and input value.\n- The task should handle the 'step_input' event, validate the input, and send a 'next_step' event if the input is correct.\n*/"
  }
  