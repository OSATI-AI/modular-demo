{
  "template_id": "template_multiple_choice",
  "title": "Figure Question Multiple Choice Template",
  "example_task": "task_estimate_addition",
  "description": "A template with a question, a figure placeholder (optional), and a container for multiple choice elements.",
  "events": {
    "send": ["choice_selected"],
    "receive": ["refresh"]
  },
  "html": "<div class=\"question-container\">\n  <p id=\"question\"></p>\n  <div id=\"image_placeholder\"></div>\n  <div id=\"choices-container\"></div>\n</div>",
  "styles": ".choice {\n  padding: 10px;\n  border: 1px solid #ccc;\n  cursor: pointer;\n  margin: 5px 0;\n}\n\n.choice.selected {\n  background-color: #d3d3d3;\n  border-color: #000;\n}\n\n.choice:hover {\n  background-color: #f0f0f0;\n}",
  "scripts": "let selectedChoice = null;\n\n// Function to create the layout for the template\nfunction createLayout(details) {\n  // Get the question element by its ID\n  const questionElement = document.getElementById('question');\n\n  // Get the image placeholder element by its ID (optional)\n  // Note: This element can be left blank by the code that uses it.\n  const imagePlaceholder = document.getElementById('image_placeholder');\n\n  // Get the choices container element by its ID and clear its content\n  const choicesContainer = document.getElementById('choices-container');\n  choicesContainer.innerHTML = '';\n\n  // Array to hold choice elements\n  const choiceElements = [];\n\n  // Loop through the number of choices and create div elements for each choice\n  for (let i = 0; i < details.choices; i++) {\n    const choiceElement = document.createElement('div');\n    choiceElement.classList.add('choice');\n\n    // Add an event listener to each choice element for the click event\n    choiceElement.addEventListener('click', () => selectChoice(choiceElement, i, details.choicesData[i]));\n\n    // Append the choice element to the choices container\n    choicesContainer.appendChild(choiceElement);\n    choiceElements.push(choiceElement);\n  }\n\n  // Return an object containing references to the elements\n  return { questionElement, imagePlaceholder, choiceElements };\n}\n\n// Function to handle the selection of a choice\nfunction selectChoice(choiceElement, id, content) {\n  // If there is already a selected choice, remove its 'selected' class\n  if (selectedChoice) {\n    selectedChoice.classList.remove('selected');\n  }\n\n  // Add the 'selected' class to the clicked choice element\n  choiceElement.classList.add('selected');\n\n  // Update the selectedChoice variable\n  selectedChoice = choiceElement;\n\n  // Send an event indicating a choice has been selected\n  playerApi.sendEvent('choice_selected', { id, content });\n}\n\n// Override the callTemplateScript method of playerApi\nplayerApi.callTemplateScript = (method, details) => {\n  // Check if the method called is 'createLayout'\n  if (method === 'createLayout') {\n    // Call the createLayout function with the provided details\n    return createLayout(details);\n  }\n};\n\n// Listen for the 'refresh' event and reset the selectedChoice variable\nplayerApi.receiveEvent('refresh', function() {\n  selectedChoice = null;\n});\n\n/*\nUsage Instructions:\n- This template is designed for tasks that require a question and multiple choice answers with a possible figure.\n- The task should call the 'createLayout' method to initialize the layout.\n- The details object passed to 'createLayout' should include:\n  - `choices`: The number of choices to display.\n  - `choicesData`: An array of strings representing the text for each choice.\n\nExample Task Setup:\n- The task calls `playerApi.callTemplateScript('createLayout', details);` where `details` includes:\n  - `choices`: The number of choices (e.g., 4).\n  - `choicesData`: An array of choice texts (e.g., ['Choice 1', 'Choice 2', 'Choice 3', 'Choice 4']).\n\nCommunication Between Template and Task:\n- The template can send events such as 'choice_selected' with the selected choice's ID and content.\n- The template can receive events such as 'refresh' to reset the selected choice.\n*/"
}
