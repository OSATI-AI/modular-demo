{
  "template_id": "template_word_selection",
  "title": "Word Selection Template",
  "example_task": "task_fraction_word_selection",
  "description": "A template that allows inputting a description by selecting words from buttons. Includes an optional image placeholder.",
  "events": {
    "send": ["words_selected"],
    "receive": ["set_words", "set_display", "refresh"]
  },
  "html": "<div class=\"word-selection-container\">\n  <h2 id=\"question\"></h2>\n  <div id=\"image_placeholder\"></div>\n  <div id=\"display\"></div>\n  <div id=\"word-container\"></div>\n  <div id=\"input-container\">\n    <div id=\"selected-words\" class=\"selected-words\"></div>\n  </div>\n</div>",
  "styles": ".selected-words {\n  border: 2px solid #000;\n  padding: 10px;\n  min-height: 50px;\n}\n.word-button {\n  display: inline-block;\n  margin: 5px;\n  padding: 10px;\n  background-color: #ccc;\n  cursor: pointer;\n}\n.word-button.selected {\n  background-color: #6c757d;\n  color: #fff;\n}\n",
  "scripts": "let selectedWords = [];\n\n// Function to create the layout for the template\nfunction createLayout(details) {\n  const questionElement = document.getElementById('question');\n  const imagePlaceholder = document.getElementById('image_placeholder');\n  const displayElement = document.getElementById('display');\n  const wordContainer = document.getElementById('word-container');\n  const selectedWordsElement = document.getElementById('selected-words');\n  return { questionElement, imagePlaceholder, displayElement, wordContainer, selectedWordsElement };\n}\n\n// Function to add or remove a word from the selected words list\nfunction addWord(word, button) {\n  if (selectedWords.includes(word)) {\n    selectedWords = selectedWords.filter(w => w !== word);\n    button.classList.remove('selected');\n  } else {\n    selectedWords.push(word);\n    button.classList.add('selected');\n  }\n  updateSelectedWords();\n}\n\n// Function to update the display of selected words\nfunction updateSelectedWords() {\n  const selectedWordsElement = document.getElementById('selected-words');\n  selectedWordsElement.innerText = selectedWords.join(' ');\n  playerApi.sendEvent('words_selected', { selectedWords });\n}\n\n// Override the callTemplateScript method of playerApi\n// This allows tasks to communicate with the template by calling this method\nplayerApi.callTemplateScript = (method, details) => {\n  if (method === 'createLayout') {\n    return createLayout(details);\n  }\n};\n\n// Listener for the 'set_words' event to populate word buttons\nplayerApi.receiveEvent('set_words', function(event) {\n  const words = event.words;\n  const wordContainer = document.getElementById('word-container');\n  wordContainer.innerHTML = words.map(word => `<div class='word-button' data-word='${word}'>${word}</div>`).join('');\n\n  // Add event listeners to each word button\n  document.querySelectorAll('.word-button').forEach(button => {\n    button.addEventListener('click', function() {\n      addWord(this.getAttribute('data-word'), this);\n    });\n  });\n});\n\n// Listener for the 'set_display' event to update the display content\nplayerApi.receiveEvent('set_display', function(event) {\n  const displayContent = event.displayContent;\n  const displayElement = document.getElementById('display');\n  displayElement.innerHTML = displayContent;\n});\n\n// Listener for the 'refresh' event to reset the selected words and word buttons\nplayerApi.receiveEvent('refresh', function() {\n  selectedWords = [];\n  updateSelectedWords();\n  document.querySelectorAll('.word-button').forEach(button => button.classList.remove('selected'));\n});\n\n/*\nUsage Instructions:\n- This template is designed for tasks that require selecting words from a set of buttons to form a description.\n- The task should call the 'createLayout' method to initialize the layout.\n- The details object passed to 'createLayout' should include:\n  - `question`: The question text to be displayed.\n  - `displayContent`: The content to be displayed in the display element.\n  - `words`: An array of words that will be displayed as buttons for selection.\n- The image placeholder can be left blank if no image is needed by the task.\n- If an image is needed, the task should manipulate the image placeholder element directly to set the image URL.\n\nExample Task Setup:\n- The task calls `playerApi.callTemplateScript('createLayout', details);` where `details` includes:\n  - `question`: The question text (e.g., 'Select the correct words to describe the fraction.').\n  - `displayContent`: The content to be displayed (e.g., 'The fraction 1/2 is...').\n  - `words`: An array of words (e.g., ['one-half', 'half', 'third', 'quarter']).\n- If an image is needed, the task can manipulate the image placeholder element:\n  - `const imagePlaceholder = document.getElementById('image_placeholder');`\n  - `imagePlaceholder.innerHTML = '<img src=\"/path/to/image.png\" alt=\"Description of image\">';`\n\nCommunication Between Template and Task:\n- The template can send events such as 'words_selected' with the list of selected words.\n- The template can receive events such as 'set_words' to populate the word buttons, 'set_display' to update the display content, and 'refresh' to reset the selected words and buttons.\n*/"
}
